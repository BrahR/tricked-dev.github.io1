{"version":3,"file":"static/chunks/pages/[lang]/aethor/[commands]-68811597f463d69b.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,4BACA,WACE,OAAO,EAAQ,U,gNCEvB,IAAMC,EAAQ,CACZ,CACEC,KAAM,WACNC,MAAO,mBAET,CACED,KAAM,SACNC,MAAO,kBAET,CACED,KAAM,UACNC,MAAO,mBAET,CACED,KAAM,oBACNC,MAAO,MAGLC,EAAO,CACXC,MAAO,SACPC,YAAc,oDACdC,KAAM,UACNC,WAAY,UACZC,SAAU,4CACVC,SAAU,uFAEG,SAASC,EAAK,G,IAAEC,EAAF,EAAEA,SAC7B,OAAM,SACHC,EAAAA,E,uUAAS,EAACZ,MAAOA,EAAOa,UAAW,UAAcV,EAAI,C,SACnDQ,O,6JCyEP,UAnGsE,SAAQ,G,IAALG,EAAQ,EAARA,SAAUC,EAAU,EAAVA,WACjF,OAAM,SACHH,EAAAA,EAAS,C,oBACPI,EAAAA,GAAI,C,qBACFC,EAAAA,GAAG,CAACC,OAAO,O,oBACTC,EAAAA,GAAU,CAACC,QAAS,EAAGF,OAAO,O,SAC5BH,EAAWM,KAAI,SAACC,EAAGC,GAClB,MAAS,IAALD,GAAe,yBACb,SACHE,EAAAA,GAAQ,C,mBACNC,EAAAA,QAAI,CAACC,KAAO,WAAY,OAAFJ,GAAKK,UAAQ,E,mBACjCC,EAAAA,GAAM,C,SAAEN,OAFEC,S,SAQpBM,EAAAA,GAAM,Q,SAERZ,EAAAA,GAAG,CAACa,KAAK,QAAQC,MAAM,O,mBACrBC,EAAAA,GAAS,CAACC,aAAW,EAACF,MAAM,O,SAC1BjB,EAASO,KAAI,SAACC,EAAGC,G,IAaPD,EAZT,OAAM,UACHY,EAAAA,GAAa,C,oBACXC,KAAE,C,oBACAC,EAAAA,GAAe,C,oBACbnB,EAAAA,GAAG,CAACoB,KAAK,IAAIC,UAAU,O,SACrBC,MAAMC,QAAQlB,EAAEmB,GAAKnB,EAAEmB,EAAEC,KAAK,KAAOpB,EAAEmB,K,SAEzCE,EAAAA,GAAa,U,UAGjBC,EAAAA,GAAc,CAACC,GAAI,E,oBACjB5B,EAAAA,GAAG,C,SACE,QAAHK,EAAAA,EAAEwB,SAAFxB,IAAAA,OAAAA,EAAAA,EAAKD,KAAI,SAAC0B,EAAGxB,GACZ,OAAM,SACHyB,EAAAA,GAAG,CAASC,MAAM,U,SAChBV,MAAMC,QAAQlB,EAAEmB,GAAM,GAAYM,OAAVzB,EAAEmB,EAAE,GAAG,KAAK,OAAFM,GAAMA,GADjCxB,S,UAMfN,EAAAA,GAAG,C,oBACDiC,EAAAA,GAAI,C,SAAC,Y,SACLC,EAAAA,GAAI,C,SAAE7B,EAAE8B,Q,SAEVnC,EAAAA,GAAG,C,mBACDiC,EAAAA,GAAI,C,SAAE5B,EAAE+B,WAxBK9B,kB","sources":["webpack://_N_E/?8d57","webpack://_N_E/./components/aethainer.tsx","webpack://_N_E/./pages/[lang]/aethor/[commands].tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/[lang]/aethor/[commands]\",\n      function () {\n        return require(\"private-next-pages/[lang]/aethor/[commands].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/[lang]/aethor/[commands]\"])\n      });\n    }\n  ","import Head from \"next/head\";\n// import { Box, HStack, Text, IconButton, Flex, Button, useColorMode, useDisclosure, Stack, Container, Avatar, Link as ChakraLink } from \"@chakra-ui/react\";\n// import { HamburgerIcon, CloseIcon, MoonIcon, SunIcon } from \"@chakra-ui/icons\";\nimport Footer from \"./footer\";\nimport Link from \"./Link\";\nimport Container from \"./container\";\nconst Links = [\n  {\n    name: \"Commands\",\n    route: \"/aethor/general\",\n  },\n  {\n    name: \"Invite\",\n    route: \"/aethor/invite\",\n  },\n  {\n    name: \"Support\",\n    route: \"/aethor/support\",\n  },\n  {\n    name: \"Back to main page\",\n    route: \"/\",\n  },\n];\nconst meta = {\n  title: \"Aethor\",\n  description: `Aethor is the best discord bot for all your needs`,\n  type: \"website\",\n  themeColor: \"#317EFB\",\n  keywords: \"discord bot discordbot aethor tricked.pro\",\n  viewport: \"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\",\n};\nexport default function Cont({ children }: any) {\n  return (\n    <Container Links={Links} TextValue={\"Aethor\"} {...meta}>\n      {children}\n    </Container>\n  );\n}\n// export default function Cont({ children }: any) {\n//   const meta = {\n//     title: \"Aethor\",\n//     description: `Aethor is the best discord bot for all your needs`,\n//     type: \"website\",\n//     themeColor: \"#317EFB\",\n//     keywords: \"discord bot discordbot aethor tricked.pro\",\n//     viewport: \"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\",\n//   };\n//   const { isOpen, onOpen, onClose } = useDisclosure();\n//   const { colorMode, toggleColorMode } = useColorMode();\n\n//   const navigationItem = (\n//     <>\n//       {Links.map((link) => (\n//         <Link href={link.route} key={link.name} p={2} rounded={\"md\"}>\n//           {link.name}\n//         </Link>\n//       ))}\n//     </>\n//   );\n\n//   return (\n//     <>\n//       <Head>\n//         <title>{meta.title}</title>\n\n//         <meta charSet=\"utf-8\" />\n//         <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n//         <meta name=\"viewport\" content={meta.viewport} />\n//         <meta name=\"keywords\" content={meta.keywords} />\n//         <meta name=\"theme-color\" content={meta.themeColor} />\n\n//         <meta name=\"favicon\" content=\"aethor.ico\" />\n//         <meta name=\"robots\" content=\"follow, index\" />\n//         <meta content={meta.description} name=\"description\" />\n\n//         <meta property=\"og:url\" content={`https://aethor.tricked.pro}`} />\n//         <meta property=\"og:type\" content={meta.type} />\n//         <meta property=\"og:site_name\" content={meta.title} />\n//         <meta property=\"og:description\" content={meta.description} />\n//         <meta property=\"og:title\" content={meta.title} />\n\n//         <meta name=\"twitter:card\" content=\"summary_large_image\" />\n//         <meta name=\"twitter:site\" content=\"@tricked\" />\n//         <meta name=\"twitter:title\" content={meta.title} />\n//         <meta name=\"twitter:description\" content={meta.description} />\n//       </Head>\n//       <Box py={5} borderTop=\"2px\" borderTopColor=\"green.500\">\n//         <Container maxW=\"container.lg\">\n//           <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n//             <IconButton size={\"md\"} icon={isOpen ? <CloseIcon /> : <HamburgerIcon />} aria-label={\"Open Menu\"} display={{ md: !isOpen ? \"none\" : \"inherit\" }} onClick={isOpen ? onClose : onOpen} />\n//             <HStack spacing={8} alignItems={\"center\"}>\n//               <HStack as={\"nav\"} spacing={4} display={{ base: \"none\", md: \"flex\" }}>\n//                 <Text>\n//                   <Flex alignItems=\"center\">\n//                     <Avatar src=\"/aethor.png\" size=\"sm\" />\n//                     <b>Aethor</b>\n//                   </Flex>\n//                 </Text>\n\n//                 {navigationItem}\n//               </HStack>\n//             </HStack>\n//             <Flex alignItems={\"center\"}>\n//               <Button aria-label=\"Switch Theme\" onClick={toggleColorMode}>\n//                 {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n//               </Button>\n//             </Flex>\n//           </Flex>\n\n//           {isOpen ? (\n//             <Box pb={4} mt={3}>\n//               <Stack as={\"nav\"} spacing={4}>\n//                 {navigationItem}\n//               </Stack>\n//             </Box>\n//           ) : null}\n//         </Container>\n//       </Box>\n\n//       {children}\n//       <Footer />\n//     </>\n//   );\n// }\n","import type { NextPage } from \"next\";\nimport Commands from \"../../../data/commands.json\";\nimport Container from \"^components/aethainer\";\nimport { Flex, Button, Accordion, AccordionItem, AccordionPanel, AccordionButton, Box, AccordionIcon, Tag, Text, Code, SimpleGrid, GridItem, Spacer } from \"@chakra-ui/react\";\nimport Link from \"next/link\";\nimport { getAllLanguageSlugs, getLanguage } from \"^api/lang\";\n\n// type Categories = keyOf Commands;\n\nconst Home: NextPage<{ commands: Command[]; categories: string[] }> = ({ commands, categories }) => {\n  return (\n    <Container>\n      <Flex>\n        <Box height=\"100%\">\n          <SimpleGrid columns={1} height=\"auto\">\n            {categories.map((x, y) => {\n              if (x == \"\") return <></>;\n              return (\n                <GridItem key={y}>\n                  <Link href={`/aethor/${x}`} passHref>\n                    <Button>{x}</Button>\n                  </Link>\n                </GridItem>\n              );\n            })}\n          </SimpleGrid>\n          <Spacer />\n        </Box>\n        <Box maxW=\"50rem\" width=\"100%\">\n          <Accordion allowToggle width=\"100%\">\n            {commands.map((x, y) => {\n              return (\n                <AccordionItem key={y}>\n                  <h2>\n                    <AccordionButton>\n                      <Box flex=\"1\" textAlign=\"left\">\n                        {Array.isArray(x.n) ? x.n.join(\" \") : x.n}\n                      </Box>\n                      <AccordionIcon />\n                    </AccordionButton>\n                  </h2>\n                  <AccordionPanel pb={4}>\n                    <Box>\n                      {x.a?.map((k, y) => {\n                        return (\n                          <Tag key={y} color=\"teal.50\">\n                            {Array.isArray(x.n) ? `${x.n[0]} ${k}` : k}\n                          </Tag>\n                        );\n                      })}\n                    </Box>\n                    <Box>\n                      <Text>Syntax</Text>\n                      <Code>{x.s}</Code>\n                    </Box>\n                    <Box>\n                      <Text>{x.d}</Text>\n                    </Box>\n                  </AccordionPanel>\n                </AccordionItem>\n              );\n            })}\n          </Accordion>\n        </Box>\n      </Flex>\n    </Container>\n  );\n};\n\ninterface Command {\n  //NAME\n  n: string | string[];\n  //DESCRIPTION\n  d: string;\n  //SYNTAX\n  s: string;\n  //ALIASES\n  a: string[];\n}\n\nexport async function getStaticProps(context: any) {\n  const language = getLanguage(context.params.lang);\n  let commands: Command[] =\n    //@ts-ignore -\n    Commands[context.params.commands] || Commands.general;\n  return {\n    props: { commands, categories: Object.keys(Commands), language },\n  };\n}\n\nexport async function getStaticPaths() {\n  let paths = [...Object.keys(Commands), \"index\", \"commands\"].map((x) => ({\n    params: { commands: x },\n  }));\n  const langs = getAllLanguageSlugs();\n\n  let newPaths = [];\n  for (let path of paths) {\n    for (let lang of langs) {\n      newPaths.push({ params: { ...path.params, ...lang.params } });\n    }\n  }\n  return {\n    paths: newPaths,\n    fallback: false,\n  };\n}\n\nexport default Home;\n"],"names":["window","__NEXT_P","push","Links","name","route","meta","title","description","type","themeColor","keywords","viewport","Cont","children","Container","TextValue","commands","categories","Flex","Box","height","SimpleGrid","columns","map","x","y","GridItem","Link","href","passHref","Button","Spacer","maxW","width","Accordion","allowToggle","AccordionItem","h2","AccordionButton","flex","textAlign","Array","isArray","n","join","AccordionIcon","AccordionPanel","pb","a","k","Tag","color","Text","Code","s","d"],"sourceRoot":""}